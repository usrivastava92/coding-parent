package az.practice;

import java.util.*;
import java.util.stream.IntStream;

public class DeleteEdge {

    public static void main(String[] args) {
        int[][] As = {{10, 5, 12, 6}, {11, 12}, {828, 962, 492, 996, 943, 828, 437, 392}, {42, 468, 335, 501, 170, 725, 479, 359, 963, 465, 706, 146, 282, 828, 962, 492, 996, 943, 828, 437, 392, 605, 903, 154, 293, 383, 422, 717, 719, 896, 448, 727, 772, 539, 870, 913, 668, 300, 36, 895, 704, 812, 323, 334, 674, 665, 142, 712, 254, 869, 548, 645, 663, 758, 38, 860, 724, 742, 530, 779, 317, 36, 191, 843, 289, 107, 41, 943, 265, 649, 447, 806, 891, 730, 371, 351, 7, 102, 394, 549, 630, 624, 85, 955, 757, 841, 967, 377, 932, 309, 945, 440, 627, 324, 538, 539, 119, 83, 930, 542, 834, 116, 640, 659, 705, 931, 978, 307, 674, 387, 22, 746, 925, 73, 271, 830, 778, 574, 98, 513, 987, 291, 162, 637, 356, 768, 656, 575, 32, 53, 351, 151, 942, 725, 967, 431, 108, 192, 8, 338, 458, 288, 754, 384, 946, 910, 210, 759, 222, 589, 423, 947, 507, 31, 414, 169, 901, 592, 763, 656, 411, 360, 625, 538, 549, 484, 596, 42, 603, 351, 292, 837, 375, 21, 597, 22, 349, 200, 669, 485, 282, 735, 54, 1000, 419, 939, 901, 789, 128, 468, 729, 894, 649, 484, 808, 422, 311, 618, 814, 515, 310, 617, 936, 452, 601, 250, 520, 557, 799, 304, 225, 9, 845, 610, 990, 703, 196, 486, 94, 344, 524, 588, 315}};
        int[][][] Bs = {{{1, 2}, {1, 4}, {4, 3}}, {{1, 2}}, {{8, 2}, {6, 3}, {5, 2}, {3, 1}, {4, 2}, {7, 2}, {2, 1}}, {{76, 15}, {207, 87}, {204, 143}, {102, 67}, {203, 9}, {77, 65}, {173, 92}, {199, 82}, {95, 50}, {132, 84}, {213, 67}, {65, 55}, {116, 74}, {195, 64}, {52, 3}, {194, 58}, {78, 68}, {190, 169}, {153, 67}, {115, 87}, {96, 85}, {215, 22}, {138, 38}, {19, 11}, {24, 4}, {217, 56}, {14, 2}, {206, 127}, {211, 154}, {148, 111}, {29, 25}, {30, 17}, {141, 5}, {2, 1}, {49, 5}, {70, 22}, {220, 69}, {9, 6}, {193, 80}, {156, 69}, {218, 155}, {72, 48}, {103, 34}, {88, 52}, {120, 62}, {5, 1}, {61, 16}, {81, 66}, {151, 137}, {16, 8}, {163, 72}, {114, 106}, {188, 173}, {31, 19}, {59, 4}, {85, 50}, {82, 26}, {177, 174}, {40, 13}, {58, 40}, {186, 43}, {113, 69}, {121, 73}, {104, 23}, {139, 134}, {161, 123}, {22, 18}, {23, 16}, {91, 30}, {90, 16}, {80, 16}, {117, 22}, {201, 126}, {179, 162}, {47, 16}, {93, 88}, {12, 10}, {167, 119}, {36, 14}, {200, 132}, {174, 99}, {185, 142}, {74, 38}, {145, 118}, {150, 88}, {134, 7}, {175, 37}, {178, 57}, {133, 97}, {20, 18}, {53, 1}, {171, 104}, {98, 75}, {122, 40}, {169, 13}, {13, 1}, {125, 98}, {191, 24}, {137, 96}, {48, 42}, {34, 3}, {127, 98}, {71, 33}, {21, 19}, {62, 15}, {6, 2}, {130, 119}, {135, 28}, {181, 93}, {159, 105}, {41, 2}, {54, 20}, {42, 19}, {63, 43}, {214, 203}, {157, 68}, {100, 80}, {187, 153}, {183, 9}, {209, 52}, {221, 26}, {140, 42}, {64, 2}, {69, 58}, {94, 50}, {99, 71}, {44, 33}, {75, 44}, {208, 35}, {197, 36}, {219, 149}, {176, 128}, {126, 7}, {158, 15}, {182, 49}, {108, 19}, {168, 157}, {110, 11}, {57, 54}, {184, 63}, {170, 49}, {18, 6}, {146, 15}, {45, 34}, {17, 7}, {152, 9}, {39, 19}, {10, 9}, {4, 1}, {124, 36}, {118, 20}, {11, 10}, {144, 128}, {160, 78}, {128, 1}, {202, 168}, {28, 16}, {33, 27}, {223, 141}, {164, 14}, {180, 163}, {7, 3}, {129, 95}, {25, 5}, {142, 87}, {222, 175}, {37, 26}, {107, 3}, {50, 37}, {149, 10}, {83, 73}, {111, 75}, {51, 26}, {73, 66}, {15, 3}, {56, 30}, {106, 41}, {8, 1}, {192, 15}, {123, 3}, {32, 17}, {165, 131}, {189, 72}, {154, 24}, {97, 86}, {210, 1}, {172, 27}, {87, 46}, {55, 52}, {119, 34}, {216, 89}, {136, 2}, {131, 92}, {109, 36}, {3, 1}, {60, 55}, {147, 21}, {43, 33}, {84, 33}, {112, 47}, {212, 169}, {67, 29}, {38, 15}, {101, 94}, {143, 23}, {162, 84}, {92, 48}, {27, 5}, {68, 4}, {79, 29}, {46, 30}, {26, 12}, {105, 103}, {196, 142}, {198, 50}, {166, 85}, {205, 87}, {35, 6}, {89, 71}, {155, 13}, {66, 16}, {86, 78}}};
        int[] outputs = {270, 132, 8012040, 947738417};
        DeleteEdge deleteEdge = new DeleteEdge();
        IntStream.range(0, As.length).forEachOrdered(i -> {
            System.out.println("Input : \nA : " + Arrays.toString(As[i]) + " \nB : " + Arrays.deepToString(Bs[i]));
            System.out.println("Output : " + deleteEdge.deleteEdge(As[i], Bs[i]));
            System.out.println("Expected : " + outputs[i]);
        });
    }

    public int deleteEdge(int[] A, int[][] B) {
        int sum = Arrays.stream(A).sum();
        Map<Integer, Set<Integer>> adjList = new HashMap<>();
        Arrays.stream(B).forEach(edge -> {
            Set<Integer> set1 = adjList.getOrDefault(edge[0], new HashSet<>());
            Set<Integer> set2 = adjList.getOrDefault(edge[1], new HashSet<>());
            set1.add(edge[1]);
            set2.add(edge[0]);
            adjList.put(edge[0], set1);
            adjList.put(edge[1], set2);
        });
        return Arrays.stream(B).mapToInt(edge -> {

            adjList.get(edge[0]).remove(edge[1]);
            adjList.get(edge[1]).remove(edge[0]);

            int subtreeSum1 = getDfsSum(A, adjList, edge[0]);
            int subtreeSum2 = sum - subtreeSum1;

            adjList.get(edge[0]).add(edge[1]);
            adjList.get(edge[1]).add(edge[0]);

            return subtreeSum1 * subtreeSum2;
        }).max().getAsInt();
    }

    private int getDfsSum(int[] A, Map<Integer, Set<Integer>> adjList, int startNode) {
        Set<Integer> visited = new HashSet<>();
        Stack<Integer> stack = new Stack<>();

        stack.add(startNode);
        visited.add(startNode);

        int subsetSum = 0;
        while (!stack.isEmpty()) {
            int pop = stack.pop();
            subsetSum += A[pop - 1];
            adjList.get(pop).forEach(child -> {
                if (!visited.contains(child)) {
                    visited.add(child);
                    stack.add(child);
                }
            });
        }
        return subsetSum;
    }
}
